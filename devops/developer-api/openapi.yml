openapi: 3.0.4
info:
  title: Developer API - Upstash
  description: |-
    This is a documentation to specify Developer API endpoints based on the OpenAPI 3.0 specification.
  contact:
    name: Support Team
    email: support@upstash.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Upstash
  url: https://upstash.com/
servers:
  - url: https://api.upstash.com/v2
tags:
  - name: redis
    description: Manage redis databases.
    externalDocs:
      description: Find out more
      url: https://upstash.com/docs/devops/developer-api/introduction
  - name: teams
    description: Manage teams and team members.
    externalDocs:
      description: Find out more
      url: https://upstash.com/docs/devops/developer-api/introduction
  - name: vector
    description: Manage vector indices.
    externalDocs:
      description: Find out more
      url: https://upstash.com/docs/devops/developer-api/introduction

paths:
  /redis/databases:
    get:
      tags:
        - redis
      summary: List Databases
      x-mint:
        href: /devops/developer-api/redis/list_databases
      description: This endpoint list all databases of user.
      operationId: listDatabases
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Database"
      security:
        - basicAuth: []
  /redis/database/{id}:
    get:
      tags:
        - redis
      summary: Get Database
      x-mint:
        href: /devops/developer-api/redis/get_database
      description: This endpoint gets details of a database.
      operationId: getDatabase
      parameters:
        - name: id
          in: path
          description: The ID of the database to reset password
          required: true
          schema:
            type: string
        - name: credentials
          in: query
          description: Set to 'hide' to remove credentials from the response.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Database"
      security:
        - basicAuth: []
    delete:
      tags:
        - redis
      summary: Delete Database
      x-mint:
        href: /devops/developer-api/redis/delete_database
      description: This endpoint deletes a database.
      operationId: deleteDatabase
      parameters:
        - name: id
          in: path
          description: The ID of the database to be deleted
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: "OK"
      security:
        - basicAuth: []
  /redis/database:
    post:
      tags:
        - redis
      summary: Create Redis Database
      description: This endpoint creates a new Redis database.
      x-mint:
        href: /devops/developer-api/redis/create_database_global
      operationId: createDatabase
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDatabaseRequest"
      responses:
        "200":
          description: Database created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Database"
      security:
        - basicAuth: []
  /redis/rename/{id}:
    post:
      tags:
        - redis
      summary: Rename Database
      description: This endpoint renames a database.
      x-mint:
        href: /devops/developer-api/redis/rename_database
      operationId: renameDatabase
      parameters:
        - name: id
          in: path
          description: The ID of the database to be renamed
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The new name of the database
              required:
                - name
      responses:
        "200":
          description: Database renamed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Database"
      security:
        - basicAuth: []
  /redis/reset-password/{id}:
    post:
      tags:
        - redis
      summary: Reset Password
      description: This endpoint updates the password of a database.
      x-mint:
        href: /devops/developer-api/redis/reset_password
      operationId: resetPassword
      parameters:
        - name: id
          in: path
          description: The ID of the database to reset password
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Password reset successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Database"
      security:
        - basicAuth: []
  /redis/enable-tls/{id}:
    post:
      tags:
        - redis
      summary: Enable TLS
      description: This endpoint enables tls on a database.
      x-mint:
        href: /devops/developer-api/redis/enable_tls
      operationId: enableTls
      parameters:
        - name: id
          in: path
          description: The ID of the database to enable TLS
          required: true
          schema:
            type: string
      responses:
        "200":
          description: TLS enabled successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Database"
      security:
        - basicAuth: []
  /redis/enable-eviction/{id}:
    post:
      tags:
        - redis
      summary: Enable Eviction
      description: This endpoint enables eviction for given database.
      x-mint:
        href: /devops/developer-api/redis/enable_eviction
      operationId: enableEviction
      parameters:
        - name: id
          in: path
          description: The ID of the database to enable eviction
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Eviction enabled successfully
          content:
            application/json:
              schema:
                type: string
                example: "OK"
      security:
        - basicAuth: []
  /redis/disable-eviction/{id}:
    post:
      tags:
        - redis
      summary: Disable Eviction
      description: This endpoint disables eviction for given database.
      x-mint:
        href: /devops/developer-api/redis/disable_eviction
      operationId: disableEviction
      parameters:
        - name: id
          in: path
          description: The ID of the database to disable eviction
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Eviction disabled successfully
          content:
            application/json:
              schema:
                type: string
                example: "OK"
      security:
        - basicAuth: []
  /redis/enable-autoupgrade/{id}:
    post:
      tags:
        - redis
      summary: Enable Auto Upgrade
      description: This endpoint enables Auto Upgrade for given database.
      x-mint:
        href: /devops/developer-api/redis/enable_autoscaling
      operationId: enableAutoUpgrade
      parameters:
        - name: id
          in: path
          description: The ID of the database to enable auto upgrade
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Auto upgrade enabled successfully
          content:
            application/json:
              schema:
                type: string
                example: "OK"
      security:
        - basicAuth: []
  /redis/disable-autoupgrade/{id}:
    post:
      tags:
        - redis
      summary: Disable Auto Upgrade
      description: This endpoint disables Auto Upgrade for given database.
      x-mint:
        href: /devops/developer-api/redis/disable_autoscaling
      operationId: disableAutoUpgrade
      parameters:
        - name: id
          in: path
          description: The ID of the database to disable auto upgrade
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Auto upgrade disabled successfully
          content:
            application/json:
              schema:
                type: string
                example: "OK"
      security:
        - basicAuth: []
  /redis/change-plan/{id}:
    post:
      tags:
        - redis
      summary: Change Database Plan
      description: This endpoint changes the plan of a Redis database.
      x-mint:
        href: /devops/developer-api/redis/change_plan
      operationId: changePlan
      parameters:
        - name: id
          in: path
          description: The ID of the database whose plan will be changed
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePlanRequest"
      responses:
        "200":
          description: Plan changed successfully
          content:
            application/json:
              schema:
                type: string
                example: "OK"
      security:
        - basicAuth: []
  /redis/update-budget/{id}:
    patch:
      tags:
        - redis
      summary: Update Database Budget
      description: This endpoint updates the monthly budget of a Redis database.
      x-mint:
        href: /devops/developer-api/redis/update_budget
      operationId: updateBudget
      parameters:
        - name: id
          in: path
          description: The ID of the database whose budget will be updated
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                budget:
                  type: integer
                  description: The new monthly budget for the database
              required:
                - budget
      responses:
        "200":
          description: Budget updated successfully
          content:
            application/json:
              schema:
                type: string
                example: "OK"
      security:
        - basicAuth: []
  /redis/update-regions/{id}:
    post:
      tags:
        - redis
      summary: Update Regions (Global)
      description: Update the regions of global database
      x-mint:
        href: /devops/developer-api/redis/update_regions
      operationId: updateRegions
      parameters:
        - name: id
          in: path
          description: The ID of your database
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                read_regions:
                  type: array
                  items:
                    type: string
                  description: Array of read regions of the database
              required:
                - read_regions
      responses:
        "200":
          description: Regions updated successfully
          content:
            application/json:
              schema:
                type: string
                example: "OK"
      security:
        - basicAuth: []
  /redis/move-to-team:
    post:
      tags:
        - redis
      summary: Move To Team
      description: This endpoint moves database under a target team
      x-mint:
        href: /devops/developer-api/redis/moveto_team
      operationId: moveToTeam
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                team_id:
                  type: string
                  description: The ID of the target team
                database_id:
                  type: string
                  description: The ID of the database to be moved
              required:
                - team_id
                - database_id
      responses:
        "200":
          description: Database moved successfully
          content:
            application/json:
              schema:
                type: string
                example: "OK"
      security:
        - basicAuth: []
  /redis/stats/{id}:
    get:
      tags:
        - redis
      summary: Get Database Stats
      description: This endpoint gets detailed stats of a database.
      x-mint:
        href: /devops/developer-api/redis/get_database_stats
      operationId: getDatabaseStats
      parameters:
        - name: id
          in: path
          description: The ID of the database
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Database stats retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatabaseStats"
      security:
        - basicAuth: []
  /redis/list-backup/{id}:
    get:
      tags:
        - redis
      summary: List Backup
      description: This endpoint lists all backups for a Redis database.
      x-mint:
        href: /devops/developer-api/redis/backup/list_backup
      operationId: listBackup
      parameters:
        - name: id
          in: path
          description: The ID of the Redis database
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Backups retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Backup"
      security:
        - basicAuth: []
  /redis/create-backup/{id}:
    post:
      tags:
        - redis
      summary: Create Backup
      description: This endpoint creates a backup for a Redis database.
      x-mint:
        href: /devops/developer-api/redis/backup/create_backup
      operationId: createBackup
      parameters:
        - name: id
          in: path
          description: The ID of the Redis database
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the backup
              required:
                - name
      responses:
        "200":
          description: Backup created successfully
          content:
            application/json:
              schema:
                type: string
                example: "OK"
      security:
        - basicAuth: []
  /redis/delete-backup/{id}/{backup_id}:
    delete:
      tags:
        - redis
      summary: Delete Backup
      description: This endpoint deletes a backup of a Redis database.
      x-mint:
        href: /devops/developer-api/redis/backup/delete_backup
      operationId: deleteBackup
      parameters:
        - name: id
          in: path
          description: The ID of the Redis database
          required: true
          schema:
            type: string
        - name: backup_id
          in: path
          description: The ID of the backup to delete
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Backup deleted successfully
          content:
            application/json:
              schema:
                type: string
                example: "OK"
      security:
        - basicAuth: []
  /redis/restore-backup/{id}:
    post:
      tags:
        - redis
      summary: Restore Backup
      description: This endpoint restores data from an existing backup.
      x-mint:
        href: /devops/developer-api/redis/backup/restore_backup
      operationId: restoreBackup
      parameters:
        - name: id
          in: path
          description: The ID of the Redis database
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                backup_id:
                  type: string
                  description: ID of the backup to restore
              required:
                - backup_id
      responses:
        "200":
          description: Backup restored successfully
          content:
            application/json:
              schema:
                type: string
                example: "OK"
      security:
        - basicAuth: []
  /redis/enable-dailybackup/{id}:
    patch:
      tags:
        - redis
      summary: Enable Daily Backup
      description: This endpoint enables daily backup for a Redis database.
      x-mint:
        href: /devops/developer-api/redis/backup/enable_dailybackup
      operationId: enableDailyBackup
      parameters:
        - name: id
          in: path
          description: The ID of the Redis database
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Daily backup enabled successfully
          content:
            application/json:
              schema:
                type: string
                example: "OK"
      security:
        - basicAuth: []
  /redis/disable-dailybackup/{id}:
    patch:
      tags:
        - redis
      summary: Disable Daily Backup
      description: This endpoint disables daily backup for a Redis database.
      x-mint:
        href: /devops/developer-api/redis/backup/disable_dailybackup
      operationId: disableDailyBackup
      parameters:
        - name: id
          in: path
          description: The ID of the Redis database
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Daily backup disabled successfully
          content:
            application/json:
              schema:
                type: string
                example: "OK"
      security:
        - basicAuth: []
  /teams:
    get:
      tags:
        - teams
      summary: List Teams
      x-mint:
        href: /devops/developer-api/teams/list_teams
      description: This endpoint lists all teams of user.
      operationId: listTeams
      responses:
        "200":
          description: Teams retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Team"
      security:
        - basicAuth: []
  /team:
    post:
      tags:
        - teams
      summary: Create Team
      x-mint:
        href: /devops/developer-api/teams/create_team
      description: This endpoint creates a new team.
      operationId: createTeam
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTeamRequest"
      responses:
        "200":
          description: Team created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
      security:
        - basicAuth: []
  /team/{id}:
    delete:
      tags:
        - teams
      summary: Delete Team
      x-mint:
        href: /devops/developer-api/teams/delete_team
      description: This endpoint deletes a team.
      operationId: deleteTeam
      parameters:
        - name: id
          in: path
          description: The ID of the team to delete
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Team deleted successfully
          content:
            application/json:
              schema:
                type: string
                example: "OK"
      security:
        - basicAuth: []
  /teams/{team_id}:
    get:
      tags:
        - teams
      summary: Get Team Members
      description: This endpoint list all members of a team.
      x-mint:
        href: /devops/developer-api/teams/get_team_members
      operationId: getTeamMembers
      parameters:
        - name: team_id
          in: path
          description: ID of the team
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Team members retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TeamMember"
      security:
        - basicAuth: []
  /teams/member:
    post:
      tags:
        - teams
      summary: Add Team Member
      description: This endpoint adds a new team member to the specified team.
      x-mint:
        href: /devops/developer-api/teams/add_team_member
      operationId: addTeamMember
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddTeamMemberRequest"
      responses:
        "200":
          description: Team member added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamMember"
      security:
        - basicAuth: []
    delete:
      tags:
        - teams
      summary: Delete Team Member
      description: This endpoint deletes a team member from the specified team.
      x-mint:
        href: /devops/developer-api/teams/delete_team_member
      operationId: deleteTeamMember
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteTeamMemberRequest"
      responses:
        "200":
          description: Team member deleted successfully
          content:
            application/json:
              schema:
                type: string
                example: "OK"
      security:
        - basicAuth: []
  /vector/index:
    get:
      tags:
        - vector
      summary: List Indices
      description: This endpoint returns the data related to all indices of an account as a list.
      x-mint:
        href: /devops/developer-api/vector/list_indices
      operationId: listIndices
      responses:
        "200":
          description: Indices retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/VectorIndex"
      security:
        - basicAuth: []
    post:
      tags:
        - vector
      summary: Create Index
      description: This endpoint creates an index.
      x-mint:
        href: /devops/developer-api/vector/create_index
      operationId: createIndex
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateIndexRequest"
      responses:
        "200":
          description: Index created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VectorIndex"
      security:
        - basicAuth: []
  /vector/index/{id}:
    get:
      tags:
        - vector
      summary: Get Index
      description: This endpoint returns the data associated to a index.
      x-mint:
        href: /devops/developer-api/vector/get_index
      operationId: getIndex
      parameters:
        - name: id
          in: path
          description: The unique ID of the index to fetch
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Index retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VectorIndex"
      security:
        - basicAuth: []
    delete:
      tags:
        - vector
      summary: Delete Index
      description: This endpoint deletes an index.
      x-mint:
        href: /devops/developer-api/vector/delete_index
      operationId: deleteIndex
      parameters:
        - name: id
          in: path
          description: The unique ID of the index to be deleted
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Index deleted successfully
          content:
            application/json:
              schema:
                type: string
                example: "OK"
      security:
        - basicAuth: []
  /vector/index/{id}/rename:
    post:
      tags:
        - vector
      summary: Rename Index
      description: This endpoint is used to change the name of an index.
      x-mint:
        href: /devops/developer-api/vector/rename_index
      operationId: renameIndex
      parameters:
        - name: id
          in: path
          description: The unique ID of the index to be renamed
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The new name of the index
              required:
                - name
      responses:
        "200":
          description: Index renamed successfully
          content:
            application/json:
              schema:
                type: string
                example: "OK"
      security:
        - basicAuth: []
  /vector/index/{id}/reset-password:
    post:
      tags:
        - vector
      summary: Reset Index Passwords
      description: This endpoint is used to reset regular and readonly tokens of an index.
      x-mint:
        href: /devops/developer-api/vector/reset_index_passwords
      operationId: resetIndexPasswords
      parameters:
        - name: id
          in: path
          description: The unique ID of the index to reset the password for
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Index passwords reset successfully
          content:
            application/json:
              schema:
                type: string
                example: "OK"
      security:
        - basicAuth: []
  /vector/index/{id}/setplan:
    post:
      tags:
        - vector
      summary: Set Index Plan
      description: This endpoint is used to change the plan of an index.
      x-mint:
        href: /devops/developer-api/vector/set_index_plan
      operationId: setIndexPlan
      parameters:
        - name: id
          in: path
          description: The unique ID of the index to change plan for
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                target_plan:
                  type: string
                  description: The new plan for the index
                  enum:
                    - free
                    - payg
                    - fixed
              required:
                - target_plan
      responses:
        "200":
          description: Index plan changed successfully
          content:
            application/json:
              schema:
                type: string
                example: "OK"
      security:
        - basicAuth: []
  /vector/index/{id}/transfer:
    post:
      tags:
        - vector
      summary: Transfer Index
      description: This endpoint is used to transfer an index to another team.
      x-mint:
        href: /devops/developer-api/vector/transfer_index
      operationId: transferIndex
      parameters:
        - name: id
          in: path
          description: The unique ID of the index to be transferred
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                target_account:
                  type: string
                  description: The ID of the target account. If the target is a team, then use the format `team:<TEAM_ID>`, else if the target is your personal account use the format `<YOUR_EMAIL>`.
                  example: "team:team-id-1"
              required:
                - target_account
      responses:
        "200":
          description: Index transferred successfully
          content:
            application/json:
              schema:
                type: string
                example: "OK"
      security:
        - basicAuth: []
components:
  schemas:
    Database:
      type: object
      properties:
        database_id:
          type: string
          description: ID of the database
          example: 96ad0856-03b1-4ee7-9666-e81abd0349e1
        database_name:
          type: string
          description: Name of the database
          example: MyRedis
        region:
          type: string
          description: The region where database is hosted
          enum: ["global"]
          example: global
        port:
          type: integer
          description: Database port for clients to connect
          format: int64
          example: 6379
        creation_time:
          type: integer
          description: Creation time of the database as Unix time
          format: int64
          example: 1752649602
        state:
          type: string
          description: State of database
          enum:
            - active
            - suspended
            - passive
          example: active
        endpoint:
          type: string
          description: Endpoint identifier or hostname of the database (may be a slug like "beloved-stallion-58500" or a full host)
          example: beloved-stallion-58500
        tls:
          type: boolean
          description: TLS/SSL is enabled or not
          example: true
        db_max_clients:
          type: integer
          description: Max number of concurrent clients can be opened on this database currently
          format: int64
          example: 10000
        db_max_request_size:
          type: integer
          description: Max size of a request that will be accepted by the database currently(in bytes)
          format: int64
          example: 10485760
        db_disk_threshold:
          type: integer
          description: Total disk size limit that can be used for the database currently(in bytes)
          format: int64
          example: 107374182400
        db_max_entry_size:
          type: integer
          description: Max size of an entry that will be accepted by the database currently(in bytes)
          format: int64
          example: 104857600
        db_memory_threshold:
          type: integer
          description: Max size of a memory the database can use(in bytes)
          format: int64
          example: 3221225472
        db_max_commands_per_second:
          type: integer
          description: Max number of commands can be sent to the database per second
          format: int64
          example: 10000
        db_request_limit:
          type: integer
          description: Total number of commands can be sent to the database
          format: int64
          example: 8024278031528736858
        type:
          type: string
          description: Payment plan of the database
          enum: ["free", "payg", "pro", "paid"]
          example: paid
        budget:
          type: integer
          description: Allocated monthly budget for the database
          format: int64
          example: 360
        primary_region:
          type: string
          description: Primary region of the database cluster
          enum:
            - ap-south-1
            - ap-southeast-1
            - ap-southeast-2
            - ap-northeast-1
            - eu-west-1
            - eu-west-2
            - eu-central-1
            - us-east-1
            - us-west-1
            - us-west-2
            - us-east-2
            - sa-east-1
            - ca-central-1
          example: us-east-1
        primary_members:
          type: array
          items:
            type: string
          description: List of primary regions in the database cluster
          example: ["us-east-1"]
        all_members:
          type: array
          items:
            type: string
          description: List of all regions in the database cluster
          example: ["us-east-1"]
        eviction:
          type: boolean
          description: Entry eviction is enabled
          example: false
        auto_upgrade:
          type: boolean
          description: Automatic upgrade capability is enabled
          example: false
        consistent:
          type: boolean
          description: Strong consistency mode is enabled
          example: false
        modifying_state:
          type: string
          description: Current modifying state of the database
          example: ""
        db_resource_size:
          type: string
          description: Resource allocation tier
          enum: ["S", "M", "L", "XL", "XXL", "3XL"]
          example: L
        db_type:
          type: string
          description: Database storage engine type
          enum: ["bolt", "badger", "pebble"]
          example: pebble
        db_conn_idle_timeout:
          type: integer
          description: Connection idle timeout in nanoseconds
          format: int64
          example: 21600000000000
        db_lua_timeout:
          type: integer
          description: Lua script execution timeout in nanoseconds
          format: int64
          example: 250000000
        db_lua_credits_per_min:
          type: integer
          description: Lua script execution credits per minute
          format: int64
          example: 10000000000
        db_store_max_idle:
          type: integer
          description: Store connection idle timeout in nanoseconds
          format: int64
          example: 900000000000
        db_max_loads_per_sec:
          type: integer
          description: Maximum load operations per second
          format: int64
          example: 1000000
        db_acl_enabled:
          type: string
          description: Access Control List enabled status
          enum: ["true", "false"]
          example: "false"
        db_acl_default_user_status:
          type: string
          description: Default user access status in ACL
          enum: ["true", "false"]
          example: "true"
        db_eviction:
          type: boolean
          description: Database-level eviction policy status
          example: false
        last_plan_upgrade_time:
          type: integer
          format: int64
          description: Unix timestamp of the last plan upgrade
          example: 0
        replicas:
          type: integer
          description: Replica factor of the database
          example: 5
        customer_id:
          type: string
          description: Owner identifier of the database (may be email or marketplace-scoped email)
          example: "example@upstash.com"
        daily_backup_enabled:
          type: boolean
          description: Whether daily backup is enabled
          example: false
        read_regions:
          type: array
          items:
            type: string
          description: Array of read regions of the database
          example: ["us-east-2"]
        securityAddons:
          type: object
          description: Security add-ons and their enablement status
          properties:
            ipWhitelisting:
              type: boolean
            vpcPeering:
              type: boolean
            privateLink:
              type: boolean
            tlsMutualAuth:
              type: boolean
            encryptionAtRest:
              type: boolean
          example:
            ipWhitelisting: false
            vpcPeering: false
            privateLink: false
            tlsMutualAuth: false
            encryptionAtRest: false
        prometheus_enabled:
          type: string
          description: Prometheus integration enabled status
          enum: ["true", "false"]
          example: "false"
        prod_pack_enabled:
          type: boolean
          description: Production pack enabled status
          example: false
      xml:
        name: database
    CreateDatabaseRequest:
      type: object
      properties:
        database_name:
          type: string
          description: Name of the database
          example: "myredis"
        region:
          type: string
          description: Region of the database. Only valid option is 'global'.
          enum:
            - global
          default: "global"
          example: "global"
        primary_region:
          type: string
          description: Primary Region of the Global Database
          enum:
            - us-east-1
            - us-east-2
            - us-west-1
            - us-west-2
            - ca-central-1
            - eu-central-1
            - eu-west-1
            - eu-west-2
            - sa-east-1
            - ap-south-1
            - ap-northeast-1
            - ap-southeast-1
            - us-central-1
            - us-east4
          example: "us-east-1"
        read_regions:
          type: array
          items:
            type: string
            enum:
              - us-east-1
              - us-east-2
              - us-west-1
              - us-west-2
              - ca-central-1
              - eu-central-1
              - eu-west-1
              - eu-west-2
              - sa-east-1
              - ap-south-1
              - ap-northeast-1
              - ap-southeast-1
              - ap-southeast-2
          description: Array of Read Regions of the Database
          example: ["us-west-1", "us-west-2"]
        plan:
          type: string
          description: |
            Specifies the fixed plan type for the database.
            If omitted, the database defaults to either the pay-as-you-go or free plan, based on the account type.
          enum:
            - free
            - payg
            - fixed_250mb
            - fixed_1gb
            - fixed_5gb
            - fixed_10gb
            - fixed_50gb
            - fixed_100gb
            - fixed_500gb
          example: "payg"
        budget:
          type: integer
          description: Monthly budget of the database
          example: 360
        eviction:
          type: boolean
          description: Whether to enable eviction for the database
          example: false
        tls:
          type: boolean
          description: Whether to enable TLS for the database
          example: true
      required:
        - database_name
        - region
        - primary_region

    ChangePlanRequest:
      type: object
      properties:
        database_id:
          type: string
          description: ID of the database
          example: "6gcefvfd-9627-2tz5-4l71-c5679g19d2g4"
        plan_name:
          type: string
          description: The new plan for the database
          enum:
            - free
            - payg
            - fixed_250mb
            - fixed_1gb
            - fixed_5gb
            - fixed_10gb
            - fixed_50gb
            - fixed_100gb
            - fixed_500gb
          example: "fixed_1gb"
        auto_upgrade:
          type: boolean
          description: Whether to enable automatic upgrade for the database
          example: true
        prod_pack_enabled:
          type: boolean
          description: Whether to enable the production pack for the database
          example: false
      required:
        - plan_name
    DatabaseStats:
      type: object
      properties:
        monitor_count:
          $ref: "#/components/schemas/TimeSeriesData"
          description: Monitor count
        daily_net_commands:
          type: integer
          description: Total number of commands executed today
          example: 7
        daily_read_requests:
          type: integer
          description: Total number of read requests executed today
          example: 7
        daily_write_requests:
          type: integer
          description: Total number of write requests executed today
          example: 0
        connection_count:
          type: array
          items:
            $ref: "#/components/schemas/TimeSeriesData"
          description: Connection count over time
          example: [{ "x": "2025-08-31 15:12:52.799480932 +0000 UTC", "y": 0 }]
        keyspace:
          type: array
          items:
            $ref: "#/components/schemas/TimeSeriesData"
          description: Total number of keys in the database over time
          example: [{ "x": "2025-08-31 15:12:52.799480932 +0000 UTC", "y": 0 }]
        throughput:
          type: array
          items:
            $ref: "#/components/schemas/TimeSeriesData"
          description: Throughput on database connections over time
          example: [{ "x": "2025-08-31 15:12:52.799480932 +0000 UTC", "y": 0 }]
        diskusage:
          type: array
          items:
            $ref: "#/components/schemas/TimeSeriesData"
          description: Disk usage over time
          example: [{ "x": "2025-08-31 15:12:52.799480932 +0000 UTC", "y": 0 }]
        latencymean:
          type: array
          items:
            $ref: "#/components/schemas/TimeSeriesData"
          description: Average latency over time
          example: [{ "x": "2025-08-31 15:12:52.799480932 +0000 UTC", "y": 0 }]
        latency_99:
          type: array
          items:
            $ref: "#/components/schemas/TimeSeriesData"
          description: 99th percentile latency over time
          example: [{ "x": "2025-08-31 15:12:52.799480932 +0000 UTC", "y": 0 }]
        read_latency_mean:
          type: array
          items:
            $ref: "#/components/schemas/TimeSeriesData"
          description: Average read latency over time
          example: [{ "x": "2025-08-31 15:12:52.799480932 +0000 UTC", "y": 0 }]
        read_latency_99:
          type: array
          items:
            $ref: "#/components/schemas/TimeSeriesData"
          description: 99th percentile read latency over time
          example: [{ "x": "2025-08-31 15:12:52.799480932 +0000 UTC", "y": 0 }]
        write_latency_mean:
          type: array
          items:
            $ref: "#/components/schemas/TimeSeriesData"
          description: Average write latency over time
          example: [{ "x": "2025-08-31 15:12:52.799480932 +0000 UTC", "y": 0 }]
        write_latency_99:
          type: array
          items:
            $ref: "#/components/schemas/TimeSeriesData"
          description: 99th percentile write latency over time
          example: [{ "x": "2025-08-31 15:12:52.799480932 +0000 UTC", "y": 0 }]
        hits:
          type: array
          items:
            $ref: "#/components/schemas/TimeSeriesData"
          description: Cache hits over time
          example: [{ "x": "2025-08-31 15:12:52.799480932 +0000 UTC", "y": 0 }]
        misses:
          type: array
          items:
            $ref: "#/components/schemas/TimeSeriesData"
          description: Cache misses over time
          example: [{ "x": "2025-08-31 15:12:52.799480932 +0000 UTC", "y": 0 }]
        read:
          type: array
          items:
            $ref: "#/components/schemas/TimeSeriesData"
          description: Read requests over time
          example: [{ "x": "2025-08-31 15:12:52.799480932 +0000 UTC", "y": 0 }]
        write:
          type: array
          items:
            $ref: "#/components/schemas/TimeSeriesData"
          description: Write requests over time
          example: [{ "x": "2025-08-31 15:12:52.799480932 +0000 UTC", "y": 0 }]
        dailyrequests:
          type: array
          items:
            $ref: "#/components/schemas/TimeSeriesData"
          description: Daily requests over time
          example:
            [
              { "x": "2025-08-31 15:12:52.799480932 +0000 UTC", "y": 0 },
              { "x": "2025-09-04 15:12:52.76649148 +0000 UTC", "y": 7 },
            ]
        days:
          type: array
          items:
            type: string
          description: Days of the week for measurement
          example: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday"]
        dailybilling:
          type: array
          items:
            $ref: "#/components/schemas/TimeSeriesData"
          description: Daily billing amounts over time
          example:
            [
              { "x": "2025-08-31 15:12:52.799480932 +0000 UTC", "y": 0 },
              { "x": "2025-09-04 15:12:52.76649148 +0000 UTC", "y": 1.333 },
            ]
        dailybandwidth:
          type: integer
          description: Total daily bandwidth usage in bytes
          example: 50444740913
        bandwidths:
          type: array
          items:
            $ref: "#/components/schemas/TimeSeriesData"
          description: Bandwidth usage over time
          example:
            [
              { "x": "2025-08-31 15:12:52.799480932 +0000 UTC", "y": 0 },
              { "x": "2025-09-04 15:12:52.76649148 +0000 UTC", "y": 7 },
            ]
        total_monthly_bandwidth:
          type: integer
          description: Total bandwidth used in current month (bytes)
          example: 7
        total_monthly_requests:
          type: integer
          description: Total requests in current month
          example: 7
        total_monthly_read_requests:
          type: integer
          description: Total read requests in current month
          example: 7
        total_monthly_write_requests:
          type: integer
          description: Total write requests in current month
          example: 0
        total_monthly_script_requests:
          type: integer
          description: Total script requests in current month
          example: 0
        queue_optimized:
          type: boolean
          description: Whether queue optimization is enabled for the database
          example: false
        total_monthly_storage:
          type: integer
          description: Total storage used in current month (bytes)
          example: 0
        current_storage:
          type: integer
          description: Current storage used (bytes)
          example: 0
        total_monthly_billing:
          type: number
          format: float
          description: Total cost in current month
          example: 222.33902763855485
        command_counts:
          type: array
          description: Command-specific counts over time
          items:
            $ref: "#/components/schemas/CommandCount"
          example:
            [
              {
                "metric_identifier": "EXISTS",
                "data_points":
                  [{ "x": "2025-08-31 15:12:52.799480932 +0000 UTC", "y": 0 }],
              },
            ]
    CommandCount:
      type: object
      properties:
        metric_identifier:
          type: string
          description: Command name or metric identifier
          example: "EXISTS"
        data_points:
          type: array
          items:
            $ref: "#/components/schemas/TimeSeriesData"
          description: Data points for the given command
    TimeSeriesData:
      type: object
      properties:
        x:
          type: string
          description: Timestamp when measurement was taken
          example: "2023-05-22 10:59:23.426 +0000 UTC"
        y:
          type: number
          description: The measured value
          example: 320
      required:
        - x
        - y
    Backup:
      type: object
      properties:
        database_id:
          type: string
          description: ID of the database
          example: "6gcqwafd-9627-4ec2-4g51-b1429h59c8d4"
        customer_id:
          type: string
          description: Customer ID
          example: "example@upstash.com"
        name:
          type: string
          description: Name of the backup
          example: "test"
        backup_id:
          type: string
          description: ID of the backup
          example: "1d62p45b-c567-1239-b23e-449ads33a62e"
        creation_time:
          type: integer
          description: Creation time of the backup as Unix time
          format: int64
          example: 1757000716
        state:
          type: string
          description: State of the backup
          enum:
            - pending
            - completed
            - failed
          example: "pending"
        backup_size:
          type: integer
          description: Size of the backup
          format: int64
          example: 0
        daily_backup:
          type: string
          description: Daily backup status
          enum:
            - "true"
            - "false"
          example: "false"
        hourly_backup:
          type: string
          description: Hourly backup status
          enum:
            - "true"
            - "false"
          example: "false"
        internal_backup_tag:
          type: string
          description: Internal backup tag
          example: ""
      xml:
        name: backup
    Team:
      type: object
      properties:
        team_id:
          type: string
          description: ID of the team
          example: "95849b27-40d0-4532-8695-d2028847f823"
        team_name:
          type: string
          description: Name of the team
          example: "test_team_name"
        copy_cc:
          type: boolean
          description: Whether creditcard information added to team during creation or not
          example: true
      xml:
        name: team
    TeamMember:
      type: object
      properties:
        team_id:
          type: string
          description: ID of the team
          example: "3423cb72-e50d-43ec-a9c0-f0f359941223"
        team_name:
          type: string
          description: Name of the team
          example: "test_team_name_2"
        member_email:
          type: string
          description: Email of the team member
          example: "example@upstash.com"
        member_role:
          type: string
          description: Role of the team member
          enum:
            - owner
            - admin
            - dev
            - finance
          example: "dev"
        copy_cc:
          type: boolean
          description: Whether to copy existing credit card information to team member or not
          example: true
      xml:
        name: teamMember
    CreateTeamRequest:
      type: object
      properties:
        team_name:
          type: string
          description: Name of the new team
          example: "myteam"
        copy_cc:
          type: boolean
          description: Whether to copy existing credit card information to team or not
          example: true
      required:
        - team_name
        - copy_cc
    AddTeamMemberRequest:
      type: object
      properties:
        team_id:
          type: string
          description: Id of the team to add the member to
          example: "95849b27-40d0-4532-8695-d2028847f823"
        member_email:
          type: string
          description: Email of the new team member
          example: "example@upstash.com"
        member_role:
          type: string
          description: Role of the new team member
          enum:
            - admin
            - dev
            - finance
          example: "dev"
      required:
        - team_id
        - member_email
        - member_role
    DeleteTeamMemberRequest:
      type: object
      properties:
        team_id:
          type: string
          description: Id of the team to remove the member from
          example: "95849b27-40d0-4532-8695-d2028847f823"
        member_email:
          type: string
          description: Email of the team member to remove
          example: "example@upstash.com"
      required:
        - team_id
        - member_email
    VectorIndex:
      type: object
      properties:
        customer_id:
          type: string
          description: The associated ID of the owner of the index
          example: "example@upstash.com"
        id:
          type: string
          description: Unique ID of the index
          example: "0639864f-ece6-429c-8118-86a287b0e808"
        name:
          type: string
          description: The name of the index
          example: "myindex"
        similarity_function:
          type: string
          description: Similarity function that's used to calculate the distance between two vectors
          enum:
            - COSINE
            - EUCLIDEAN
            - DOT_PRODUCT
          example: "COSINE"
        dimension_count:
          type: number
          description: The amount of values in a single vector
          example: 384
        embedding_model:
          type: string
          description: The predefined embedding model to vectorize your plain text
          enum:
            - BGE_SMALL_EN_V1_5
            - BGE_BASE_EN_V1_5
            - BGE_LARGE_EN_V1_5
            - BGE_M3
            - BERT_BASE_UNCASED
            - UAE_LARGE_V1
            - ALL_MINILM_L6_V2
            - MXBAI_EMBED_LARGE_V1
            - BM25
          example: "BGE_SMALL_EN_V1_5"
        sparse_embedding_model:
          type: string
          description: The sparse embedding model to be used for indexes
          enum:
            - BM25
            - BGE_M3
          example: "BM25"
        endpoint:
          type: string
          description: The REST endpoint of the index
          example: "glowing-baboon-15797-us1"
        token:
          type: string
          description: The REST authentication token for the index
          example: "QkZGAsWp2tdW0tdC0zNzM1LWV1MkFkNQzB1ExUb3hOekF0TVRJbFpMDNLVSm1GZw=="
        read_only_token:
          type: string
          description: The REST authentication read only token for the index
          example: "QkZGRk1heGSKC0MtdRlZC0zNzM1LWTj3pAV0Wm1aZ01p05qY3RNR0U0TkRtRt2s9azJU"
        type:
          type: string
          description: The payment plan of the index
          enum:
            - free
            - payg
            - fixed
          example: "fixed"
        region:
          type: string
          description: The region where the index is currently deployed
          enum:
            - eu-west-1
            - us-east-1
            - us-central-1
          example: "us-east-1"
        max_vector_count:
          type: number
          description: The number of maximum that your index can contain
          example: 5210000
        max_daily_updates:
          type: number
          description: The number of maximum update operations you can perform in a day. Only upsert operations are included in update count.
          example: 1000000
        max_daily_queries:
          type: number
          description: The number of maximum query operations you can perform in a day. Only query operations are included in query count.
          example: 1000000
        max_monthly_bandwidth:
          type: number
          description: The maximum amount of monthly bandwidth for the index. Unit is bytes. -1 if the limit is unlimited.
          example: -1
        max_writes_per_second:
          type: number
          description: The number of maximum write operations you can perform per second. Only upsert operations are included in write count.
          example: 1000
        max_query_per_second:
          type: number
          description: The number of maximum query operations you can perform per second. Only query operations are included in query count.
          example: 1000
        max_reads_per_request:
          type: number
          description: The number of maximum vectors in a read operation. Query and fetch operations are included in read operations.
          example: 1000
        max_writes_per_request:
          type: number
          description: The number of maximum vectors in a write operation. Only upsert operations are included in write operations.
          example: 1000
        max_total_metadata_size:
          type: number
          description: The amount of maximum size for the total metadata sizes in your index.
          example: 53687091200
        reserved_price:
          type: number
          description: Monthly pricing of your index. Only available for fixed and pro plans.
          example: 60
        creation_time:
          type: number
          description: The creation time of the vector index in UTC as unix timestamp.
          example: 1753207106
        index_type:
          type: string
          description: The type of the vector index
          enum:
            - DENSE
            - SPARSE
            - HYBRID
          example: "DENSE"
        throughput_vector:
          type: array
          items:
            $ref: "#/components/schemas/TimeSeriesData"
          description: Throughput data for the vector index over time
          example:
            [
              { "x": "2025-09-04 14:55:00.000 +0000 UTC", "y": 0 },
              { "x": "2025-09-04 14:56:00.000 +0000 UTC", "y": 0 },
            ]
      xml:
        name: vectorIndex
    CreateIndexRequest:
      type: object
      properties:
        name:
          type: string
          description: Name of the index
          example: "myindex"
        region:
          type: string
          description: Region of the database
          enum:
            - eu-west-1
            - us-east-1
            - us-central-1
          example: "us-east-1"
        similarity_function:
          type: string
          description: Similarity function that's used to calculate the distance between two vectors
          enum:
            - COSINE
            - EUCLIDEAN
            - DOT_PRODUCT
          example: "COSINE"
        dimension_count:
          type: number
          description: The amount of values in a single vector
          example: 1024
        type:
          type: string
          description: The payment plan of your index
          enum:
            - payg
            - fixed
            - paid
          example: "payg"
        embedding_model:
          type: string
          description: The embedding model to use for the index
          enum:
            - BGE_SMALL_EN_V1_5
            - BGE_BASE_EN_V1_5
            - BGE_LARGE_EN_V1_5
            - BGE_M3
            - BERT_BASE_UNCASED
            - UAE_LARGE_V1
            - ALL_MINILM_L6_V2
            - MXBAI_EMBED_LARGE_V1
            - BM25
          example: "BGE_M3"
        index_type:
          type: string
          description: The type of the vector index
          enum:
            - DENSE
            - SPARSE
            - HYBRID
          example: "HYBRID"
        sparse_embedding_model:
          type: string
          description: The sparse embedding model to be used for indexes
          enum:
            - BM25
            - BGE_M3
          example: "BM25"
      required:
        - name
        - region
        - similarity_function
        - dimension_count
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: "##default"
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
